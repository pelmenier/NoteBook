//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoteBookWebForms.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NoteBookDataBaseEntities : DbContext
    {
        public NoteBookDataBaseEntities()
            : base("name=NoteBookDataBaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contact> Contact { get; set; }
    
        public virtual int ContactCreateOrUpdate(Nullable<int> contactID, string name, string mobile, string email)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactCreateOrUpdate", contactIDParameter, nameParameter, mobileParameter, emailParameter);
        }
    
        public virtual int ContactDeleteByID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactDeleteByID", contactIDParameter);
        }
    
        public virtual ObjectResult<ContactViewAll_Result> ContactViewAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactViewAll_Result>("ContactViewAll");
        }
    
        public virtual ObjectResult<ContactViewByID_Result> ContactViewByID(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactViewByID_Result>("ContactViewByID", contactIDParameter);
        }
    
        public virtual ObjectResult<ContentViewAll_Result> ContentViewAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContentViewAll_Result>("ContentViewAll");
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertContact(Nullable<int> contactID, string name, string mobile, string email)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("contactID", contactID) :
                new ObjectParameter("contactID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertContact", contactIDParameter, nameParameter, mobileParameter, emailParameter);
        }
    }
}
